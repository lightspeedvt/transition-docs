{
    "docs": [
        {
            "location": "/", 
            "text": "Transition Documentation\n\n\nThis documentation serves to provide an overview of the following LightSpeed VT projects:\n\n\n\n\nBoilerplate\n  \n\n\nBlue Steel\n  \n\n\nVideo Player", 
            "title": "Home"
        }, 
        {
            "location": "/#transition-documentation", 
            "text": "This documentation serves to provide an overview of the following LightSpeed VT projects:   Boilerplate     Blue Steel     Video Player", 
            "title": "Transition Documentation"
        }, 
        {
            "location": "/boilerplate/", 
            "text": "Boilerplate Introduction\n\n\nThe \"Boilerplate\" is the most basic component of the LightSpeed VT platform and represents the global UI of the system. It may help to think of it as the \"Page Template\" of the system. The components of the Boilerplate are as follows:\n\n\n\n\n\n\n\"Hamburger Menu\"\n\nCan be hidden or shown by the user and contains links to most areas of the system. Intended to provide quick and convenient access for users.\n\n\n\n\n\n\nPage Header\n\nEstablishes branding and exposes crucial navigation elements and functionality throughout the system.\n\n\n\n\n\n\nPage Background\n\nSupports and enhances branding and adds visual interest throughout the system.\n\n\n\n\n\n\nPage Body\n\nDisplays a distinct backdrop for page content and provides \"cookie crumb\" navigation functionality for sub-pages.\n\n\n\n\n\n\nPage Footer\n\nProvides links to less-often used areas of the system as well as legal information and additional branding opportunities (logos, etc)\n\n\n\n\n\n\nProjects/Repositories\n\n\nThere are a few different projects that come together to complete the Boilerplate. Each project has it's own README, listed here for convenience.  \n\n\nNOTE:\n most of these repositories are private, the links will appear broken if you are not signed in to GitHub.\n\n\n\n\n\n\nJavascript Core\n\nBoilerplate rendering and core functionality built with KnockoutJS\n\n\n\n\n\n\nLegacy Support\n\nJavascript and CSS for \"legacy\" pages within the system.\n\n\n\n\n\n\n\"Grayline\" CSS for Themer 2.0\n\nSass framework for generating the Boilerplate's structural CSS.\n\n\n\n\n\n\nSass \"Themer\"\n (deprecated)\n\nSass framework for generating and applying themes in the LightSpeed VT application.\n\n\n\n\n\n\nPutting It All Together\n\n\nEach of the projects above has it's own (similar) publishing method. In each case, you'll end up with static files that are published to Amazon S3/Cloudfront.\n\n\nAfter the files are published you'll need to get them into the system. You'll essentially just be updating paths to the newly published files.\n\n\nThe paths are located in the file \n/template/boilerplate/top.cfm:21\n in the \nrequest.assetUrls\n object/struct:\n\n\nrequest.assetUrls = {\n    themeCSS: session.Auth.BoilerplateThemeURL,\n    printCSS: themeUrl \n \n/print-0.1.min.css\n,\n    legacyCSS: themeUrl \n \n/legacy/styles-0.1.min.css\n,\n    legacyPrintCSS: themeUrl \n \n/legacy/print-0.1.min.css\n,\n    legacyJS: themeUrl \n \n/legacy/scripts-0.2.min.js\n,\n    boilerplateJS: themeUrl \n \n/js/boilerplate-0.7.min.js\n\n};", 
            "title": "Boilerplate"
        }, 
        {
            "location": "/boilerplate/#boilerplate-introduction", 
            "text": "The \"Boilerplate\" is the most basic component of the LightSpeed VT platform and represents the global UI of the system. It may help to think of it as the \"Page Template\" of the system. The components of the Boilerplate are as follows:    \"Hamburger Menu\" \nCan be hidden or shown by the user and contains links to most areas of the system. Intended to provide quick and convenient access for users.    Page Header \nEstablishes branding and exposes crucial navigation elements and functionality throughout the system.    Page Background \nSupports and enhances branding and adds visual interest throughout the system.    Page Body \nDisplays a distinct backdrop for page content and provides \"cookie crumb\" navigation functionality for sub-pages.    Page Footer \nProvides links to less-often used areas of the system as well as legal information and additional branding opportunities (logos, etc)", 
            "title": "Boilerplate Introduction"
        }, 
        {
            "location": "/boilerplate/#projectsrepositories", 
            "text": "There are a few different projects that come together to complete the Boilerplate. Each project has it's own README, listed here for convenience.    NOTE:  most of these repositories are private, the links will appear broken if you are not signed in to GitHub.    Javascript Core \nBoilerplate rendering and core functionality built with KnockoutJS    Legacy Support \nJavascript and CSS for \"legacy\" pages within the system.    \"Grayline\" CSS for Themer 2.0 \nSass framework for generating the Boilerplate's structural CSS.    Sass \"Themer\"  (deprecated) \nSass framework for generating and applying themes in the LightSpeed VT application.", 
            "title": "Projects/Repositories"
        }, 
        {
            "location": "/boilerplate/#putting-it-all-together", 
            "text": "Each of the projects above has it's own (similar) publishing method. In each case, you'll end up with static files that are published to Amazon S3/Cloudfront.  After the files are published you'll need to get them into the system. You'll essentially just be updating paths to the newly published files.  The paths are located in the file  /template/boilerplate/top.cfm:21  in the  request.assetUrls  object/struct:  request.assetUrls = {\n    themeCSS: session.Auth.BoilerplateThemeURL,\n    printCSS: themeUrl    /print-0.1.min.css ,\n    legacyCSS: themeUrl    /legacy/styles-0.1.min.css ,\n    legacyPrintCSS: themeUrl    /legacy/print-0.1.min.css ,\n    legacyJS: themeUrl    /legacy/scripts-0.2.min.js ,\n    boilerplateJS: themeUrl    /js/boilerplate-0.7.min.js \n};", 
            "title": "Putting It All Together"
        }, 
        {
            "location": "/blue-steel/overview/", 
            "text": "Blue-Steel Introduction\n\n\n\"Blue Steel\" is/was the code-name for the HTML based \"Training Center\" component of the LightSpeed VT platform. It was originally built to be a feature-complete recreation of the previous Flash-based Training Center.  \n\n\nDue to the lack of a suitable \"Single-Page App\" framework at the time of development a custom solution was developed and remains in use today. The core of the functionality is based on \nKnockoutJS\n and makes heavy use of client-side templates and two-way data binding.  \n\n\nThere are a number of third party libraries and utilities as well as a healthy dose of custom Javascript. This documentation will aim to provide a general outline of the inner-workings and thought process behind Blue Steel's development.\n\n\n\n\n3rd Party Tools\n\n\n\n\n\n\n\n\nName\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\njQuery\n\n\nXHR Requests, DOM selection, Animation, Utility Methods (\n$.extend\n, etc)\n\n\n\n\n\n\njQueryAddress\n\n\nURL Routing, Deeplinking\n\n\n\n\n\n\nClass.extend\n\n\nClassical Inheritance\n\n\n\n\n\n\nTweenMax\n\n\nAnimation\n\n\n\n\n\n\nJS Signals\n\n\nEvent Delegation\n\n\n\n\n\n\nYepnope\n\n\nAsset Loading (CSS, HTML, JS, Images)\n\n\n\n\n\n\n\n\n\n\nDeployment\n\n\nThe files are located in the \n/tc/\n directory of the main LightSpeed VT application. There is currently no build step involved and all assets load asynchronously via YepNope and custom extensions.\n\n\n\n\nLocal Development\n\n\nThe application can be run locally using static assets. The recommended configuration is to map a virtual host to the \n/tc/\n directory and use the domain \nhttp://bluesteel.lightspeedvt.com\n which will allow certain domain specific things (like fonts) to load correctly.  \n\n\nThe JSON services are replicated in the \n/tc/data/static/\n directory and can be manipulated for testing purposes.\n\n\n\n\nBoilerplate vs. Non-Boilerplate\n\n\nBlue-Steel was initially developed before the Boilerplate and had it's own separate set of requirements. Once the Boilerplate was implemented there were some shared resources so a few alternative files were created to support the transition, they are listed in the following table:\n\n\nOriginal File:\n \nthemes/lsvt/main.html\n\n\nBoilerplate File:\n \nthemes/lsvt/main-boilerplate.html\n\n\nThis file defines the \"outer\" page structure of the application. When Boilerpate is OFF, it renders the navigation and other global elements which the Boilerplate provides.\n\n\nOriginal File:\n \nindex-boilerplate.cfm\n\n\nBoilerplate File:\n \nindex-legacy.cfm\n\n\nThe \nlegacy\n file includes the html, head and body tags which are removed in favor of includes inside the \nboilerplate\n file.", 
            "title": "Introduction"
        }, 
        {
            "location": "/blue-steel/overview/#blue-steel-introduction", 
            "text": "\"Blue Steel\" is/was the code-name for the HTML based \"Training Center\" component of the LightSpeed VT platform. It was originally built to be a feature-complete recreation of the previous Flash-based Training Center.    Due to the lack of a suitable \"Single-Page App\" framework at the time of development a custom solution was developed and remains in use today. The core of the functionality is based on  KnockoutJS  and makes heavy use of client-side templates and two-way data binding.    There are a number of third party libraries and utilities as well as a healthy dose of custom Javascript. This documentation will aim to provide a general outline of the inner-workings and thought process behind Blue Steel's development.   3rd Party Tools     Name  Usage      jQuery  XHR Requests, DOM selection, Animation, Utility Methods ( $.extend , etc)    jQueryAddress  URL Routing, Deeplinking    Class.extend  Classical Inheritance    TweenMax  Animation    JS Signals  Event Delegation    Yepnope  Asset Loading (CSS, HTML, JS, Images)      Deployment  The files are located in the  /tc/  directory of the main LightSpeed VT application. There is currently no build step involved and all assets load asynchronously via YepNope and custom extensions.   Local Development  The application can be run locally using static assets. The recommended configuration is to map a virtual host to the  /tc/  directory and use the domain  http://bluesteel.lightspeedvt.com  which will allow certain domain specific things (like fonts) to load correctly.    The JSON services are replicated in the  /tc/data/static/  directory and can be manipulated for testing purposes.   Boilerplate vs. Non-Boilerplate  Blue-Steel was initially developed before the Boilerplate and had it's own separate set of requirements. Once the Boilerplate was implemented there were some shared resources so a few alternative files were created to support the transition, they are listed in the following table:  Original File:   themes/lsvt/main.html  Boilerplate File:   themes/lsvt/main-boilerplate.html  This file defines the \"outer\" page structure of the application. When Boilerpate is OFF, it renders the navigation and other global elements which the Boilerplate provides.  Original File:   index-boilerplate.cfm  Boilerplate File:   index-legacy.cfm  The  legacy  file includes the html, head and body tags which are removed in favor of includes inside the  boilerplate  file.", 
            "title": "Blue-Steel Introduction"
        }, 
        {
            "location": "/blue-steel/configuration/", 
            "text": "Initialization\n\n\nUpon page load the javascript file \nbootstrap.js\n is loaded. This file handles the initial preload and \"bootstrapping\" of the application as well as defining some utility classes and functions.  \n\n\nLet's take a look at the \nscript\n tag and point out a few things of note:\n\n\nscript id=\nblue-steel-boot\n data-version=\n5.191.0\n data-config=\ndata/static/global.json\n src=\njs/bootstrap.js?5.191.0\n/script\n\n\n\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata-version\n\n\nUsed to cache-bust application files and should be updated if any of the core files are modified.\nNOTE:\n To update this value in production, update the following in \ntc/index.cfm\n line 13:\ncfset versionNumber = \"5.216.0\" /\n\n\n\n\n\n\ndata-config\n\n\nDefines the JSON resource that configures the application\n\n\n\n\n\n\nsrc\n\n\nPath to bootstrap.js with version number, should be the same as the \ndata-version\n attribute\n\n\n\n\n\n\ndata-theme\n\n\nDefines the \"theme\" to use for loading module views. See \nConfiguring The View\n for more information.\n\n\n\n\n\n\n\n\nConfiguration\n\n\nThe application uses a JSON configuration that is generated server-side via Coldfusion. To see a full example, log in and access the service at \n/tc/data/global.cfm?format=json\n  \n\n\nOnce the application has loaded the config can be accessed using the following code snippet:\n\n\nvar app = lsvt.core.Application.getInstance();\nconsole.log( app.config );\n\n\n\n\n\n\nGlobals\n\n\nThe config service is useful for setting global values that can be used throughout the application or in specific areas. You can see some example globals in the snippet below. \n\n\n{\n    \nallowNavigation\n: true,\n    \nallowFavorites\n: true,\n    \nallowRatings\n: true,\n    \nallowSharing\n: true,\n    \nallowEditing\n: true,\n    \nshowRecent\n: false,\n    \nshowChapterExtras\n: true,\n    \nerrors\n: {\n        \nassessment\n: {\n            \nmessage\n: \nThere was a problem evaluating these answers.\n,\n            \ndetail\n: \nPlease contact \na href='mailto:support@lightspeedvt.com'\nsupport@lightspeedvt.com\n/a\n and provide the first name, last name and email address used for this assessment.\n\n        }\n    }\n\n\n\n\n\n\nModules\n\n\nModules are essentially \"pages\" inside the application. They are loaded, intialized, and rendered by the application using a \n\"convention over configuration\"\n approach. This means that instead of a detailed configuration, you simply follow a few \"conventions\" in order to get your modules to load and display in the application.\n\n\nThe first convention used in creating a module is to list it inside of the \nmodules\n object of the application config. Typically the only property of the object will be \nversion\n which helps to cache-bust the assets that the module consists of. Below is a small snippet of what that looks like.  \n\n\n\n\nFor more information please view the \nModules Page\n.\n\n\n\n\n    \nmodules\n: {\n        \ntrainingcenter\n: {\n            \ncategory\n: {\n                \nversion\n: \n5.216.0\n\n            }\n            ...\n        }\n    }\n\n\n\n\n\n\nResources\n\n\nResources are the service URLs at which the application sends and receives data. After referencing them in the config you'll use the method \napp.loadResource(resourceName, config)\n to invoke the service. The configuration object should conform to \njQuery's Ajax API\n.\n\n\n\n\nFor more information please view the \nResources Page\n.\n\n\n\n\napp.loadResource( \ncategory\n, {\n    data:{id:id},\n    success:configLoaded\n});\n\n\n\n\n    \nresources\n: {\n        \ncategory\n: \ndata/category.cfm\n\n        ...\n    }", 
            "title": "Configuration"
        }, 
        {
            "location": "/blue-steel/configuration/#initialization", 
            "text": "Upon page load the javascript file  bootstrap.js  is loaded. This file handles the initial preload and \"bootstrapping\" of the application as well as defining some utility classes and functions.    Let's take a look at the  script  tag and point out a few things of note:  script id= blue-steel-boot  data-version= 5.191.0  data-config= data/static/global.json  src= js/bootstrap.js?5.191.0 /script      Attribute  Description      data-version  Used to cache-bust application files and should be updated if any of the core files are modified. NOTE:  To update this value in production, update the following in  tc/index.cfm  line 13: cfset versionNumber = \"5.216.0\" /    data-config  Defines the JSON resource that configures the application    src  Path to bootstrap.js with version number, should be the same as the  data-version  attribute    data-theme  Defines the \"theme\" to use for loading module views. See  Configuring The View  for more information.", 
            "title": "Initialization"
        }, 
        {
            "location": "/blue-steel/configuration/#configuration", 
            "text": "The application uses a JSON configuration that is generated server-side via Coldfusion. To see a full example, log in and access the service at  /tc/data/global.cfm?format=json     Once the application has loaded the config can be accessed using the following code snippet:  var app = lsvt.core.Application.getInstance();\nconsole.log( app.config );   Globals  The config service is useful for setting global values that can be used throughout the application or in specific areas. You can see some example globals in the snippet below.   {\n     allowNavigation : true,\n     allowFavorites : true,\n     allowRatings : true,\n     allowSharing : true,\n     allowEditing : true,\n     showRecent : false,\n     showChapterExtras : true,\n     errors : {\n         assessment : {\n             message :  There was a problem evaluating these answers. ,\n             detail :  Please contact  a href='mailto:support@lightspeedvt.com' support@lightspeedvt.com /a  and provide the first name, last name and email address used for this assessment. \n        }\n    }   Modules  Modules are essentially \"pages\" inside the application. They are loaded, intialized, and rendered by the application using a  \"convention over configuration\"  approach. This means that instead of a detailed configuration, you simply follow a few \"conventions\" in order to get your modules to load and display in the application.  The first convention used in creating a module is to list it inside of the  modules  object of the application config. Typically the only property of the object will be  version  which helps to cache-bust the assets that the module consists of. Below is a small snippet of what that looks like.     For more information please view the  Modules Page .        modules : {\n         trainingcenter : {\n             category : {\n                 version :  5.216.0 \n            }\n            ...\n        }\n    }   Resources  Resources are the service URLs at which the application sends and receives data. After referencing them in the config you'll use the method  app.loadResource(resourceName, config)  to invoke the service. The configuration object should conform to  jQuery's Ajax API .   For more information please view the  Resources Page .   app.loadResource(  category , {\n    data:{id:id},\n    success:configLoaded\n});       resources : {\n         category :  data/category.cfm \n        ...\n    }", 
            "title": "Configuration"
        }, 
        {
            "location": "/blue-steel/modules/", 
            "text": "Modules\n\n\nA \"module\" is composed of a viewmodel and view. In the application, modules are typically top-level only and control or compose their own children/submodules.\n\n\n\n\nConvention Over Configuration\n\n\nModules are composed by the application at run-time based on a few factors:  \n\n\n\n\nmodules\n Configuration Object\n\n\nURL/Deeplink Value\n\n\n\"Theme\" Path\n\n\n\n\n\n\nConfiguring Modules\n\n\nThe \nJSON configuration\n contains a \nmodules\n property that looks like this:\n\n\n    \nmodules\n: {\n        \ntrainingcenter\n: {\n            \ncategory\n: {\n                \nversion\n: \n5.216.0\n,\n                \nname\n: \ncategory-redux\n\n            }\n            ...\n        }\n    }\n\n\n\n\n\n\nModule Configuration Attributes:\n  \n\n\n\n\n\n\nPath\n\nThe \npath\n to the config object is related directly to the url routing system. In the example above, when the url \n#/trainingcenter/category\n is accessed, the \"category\" module will be loaded and displayed.  \n\n\n\n\n\n\nVersion\n\nThe \nversion\n property is appended to all asset requests and serves to \"cache-bust\" files. It's \nvitally important\n that you update this value when releasing updates to production. Failure to do so could cause errors for users that have the previous version cached.  \n\n\n\n\n\n\nName\n\nThe \nname\n property allows the application to load files that are not directly correlated to the module name. This is helpful when you want to load a different module based on server-side logic. The current example would be the \"topic style\" categories menu which is used on a per client basis.\n\n\n\n\n\n\n\n\nDefining a Module\n\n\nWhen the application's url is changed it will look for a corresponding module definition based on the configuration. If the module has not been defined it will attempt to load a javascript file from the \njs/modules\n directory.  \n\n\nBuilding off of our configuration above, that file would be: \njs/modules/trainingcenter/category.js\n.  \n\n\nInside \ncategory.js\n we will define the module like so:\n\n\ndefineModule( \ntrainingcenter/category\n, function( app, model ) {\n    // Any methods or properties that you add to the \nmodel\n instance here\n    // will be available to your view for data-binding\n}\n\n\n\n\n\n\nConfiguring The ViewModel\n\n\nThe \nmodel\n argument contains your viewmodel instance. The following methods are predefined and should be overridden in order for you module to work:\n\n\nmodel.initialize = function(deeplink) {\n    // This method is called before the module is rendered and is typically\n    // used to load a resource and configure the view model\n    // The \ndeeplink\n argument is an array of the url parts *after* the module name\n    // If we accessed #/trainingcenter/category/foo/bar it would be ['foo','bar']\n};\n\nmodel.onDeeplink = function(deeplink) {\n    // This method is called if the url is changed after rendering\n    // AND the module name/path does NOT change\n    // Based on the code above the change could be #/trainingcenter/category/new/deeplink\n};\n\n// This method should be called once your configuration and any\n// additional assets have been fully loaded.\n// It supports a float value from 0-1 and can be used for preloading\nmodel.setPercentLoaded(1);\n\n\n\n\n\n\nConfiguring The View\n\n\nViews are HTML fragments that are bound to the ViewModel and rendered to the page. The JSON configuration contains a \nthemes\n property that looks like this:\n\n\n    \nthemes\n: {\n        \ndefault\n: {\n            \npath\n: \nthemes/lsvt/\n\n            ...\n        }\n    }\n\n\n\n\nThe active theme is set to \"default\" unless specified in the \ndata-theme\n attribute of the \nscript\n tag. See the \nOverview Page\n for more information.  \n\n\nOnce the active theme has been determined the application will load your views from the \npath\n property. This allows you to create a completely new front end while using the core of the application logic and module definitions.  \n\n\nThe convention used to locate views is \ntheme path + module name + .html\n which would cause our \"category\" example to be located here: \nthemes/lsvt/trainingcenter/category.html\n\n\n\n\nAnatomy of a View\n\n\nViews are simply HTML using Knockout's template syntax. They are bound to the viewmodel and have access to its methods and properties.\n\n\n\n\nRunning through \nhttp://learn.knockoutjs.com\n can help you learn the syntax and better understand templates.\n\n\n\n\n\n\nLoading View-Specific Assets\n\n\nViews also provide a special \"preload\" comment that allows you to preload files related to your view. These files can be anything YepNope supports, images, css, javascript etc. You'll need to place it on the first line of your template like so:\n\n\n!-- preload: assets/category.js, assets/category.css --\n\n\n\n\n\nNote that any images within the css files will be preloaded as well and your module will not be rendered until this process has been completed. Paths are relative to the current template's location.  \n\n\n\n\nExtending ViewModels\n\n\nViews should load an additional .js file (via the preload comment) that will extend/decorate the viewmodel. The intention here is that views should be animated and will need to notify the application when they are complete.\n\n\n(function(){\n    var app = lsvt.core.Application.getInstance(); // Get the app instance\n    var view = new lsvt.core.View(\ntrainingcenter/category\n); // Create a view instance\n    var model = app.getModel( \ntrainingcenter/topics\n ); // Get the viewmodel instance\n\n    // Add methods, etc to the viewmodel\n    model.myViewSpecificFunctionality = function() {\n        $('.someViewElement').doSomethingSpecial();\n    };\n\n    view.rendered.add(function(){\n        // Do some transitioning in, or target specific elements\n    });\n\n    view.ended.add(function(){\n        // Do some transitioning out, or cleaning up then\n        view.complete();\n    });\n\n})();", 
            "title": "Modules"
        }, 
        {
            "location": "/blue-steel/modules/#modules", 
            "text": "A \"module\" is composed of a viewmodel and view. In the application, modules are typically top-level only and control or compose their own children/submodules.   Convention Over Configuration  Modules are composed by the application at run-time based on a few factors:     modules  Configuration Object  URL/Deeplink Value  \"Theme\" Path    Configuring Modules  The  JSON configuration  contains a  modules  property that looks like this:       modules : {\n         trainingcenter : {\n             category : {\n                 version :  5.216.0 ,\n                 name :  category-redux \n            }\n            ...\n        }\n    }   Module Configuration Attributes:       Path \nThe  path  to the config object is related directly to the url routing system. In the example above, when the url  #/trainingcenter/category  is accessed, the \"category\" module will be loaded and displayed.      Version \nThe  version  property is appended to all asset requests and serves to \"cache-bust\" files. It's  vitally important  that you update this value when releasing updates to production. Failure to do so could cause errors for users that have the previous version cached.      Name \nThe  name  property allows the application to load files that are not directly correlated to the module name. This is helpful when you want to load a different module based on server-side logic. The current example would be the \"topic style\" categories menu which is used on a per client basis.     Defining a Module  When the application's url is changed it will look for a corresponding module definition based on the configuration. If the module has not been defined it will attempt to load a javascript file from the  js/modules  directory.    Building off of our configuration above, that file would be:  js/modules/trainingcenter/category.js .    Inside  category.js  we will define the module like so:  defineModule(  trainingcenter/category , function( app, model ) {\n    // Any methods or properties that you add to the  model  instance here\n    // will be available to your view for data-binding\n}   Configuring The ViewModel  The  model  argument contains your viewmodel instance. The following methods are predefined and should be overridden in order for you module to work:  model.initialize = function(deeplink) {\n    // This method is called before the module is rendered and is typically\n    // used to load a resource and configure the view model\n    // The  deeplink  argument is an array of the url parts *after* the module name\n    // If we accessed #/trainingcenter/category/foo/bar it would be ['foo','bar']\n};\n\nmodel.onDeeplink = function(deeplink) {\n    // This method is called if the url is changed after rendering\n    // AND the module name/path does NOT change\n    // Based on the code above the change could be #/trainingcenter/category/new/deeplink\n};\n\n// This method should be called once your configuration and any\n// additional assets have been fully loaded.\n// It supports a float value from 0-1 and can be used for preloading\nmodel.setPercentLoaded(1);   Configuring The View  Views are HTML fragments that are bound to the ViewModel and rendered to the page. The JSON configuration contains a  themes  property that looks like this:       themes : {\n         default : {\n             path :  themes/lsvt/ \n            ...\n        }\n    }  The active theme is set to \"default\" unless specified in the  data-theme  attribute of the  script  tag. See the  Overview Page  for more information.    Once the active theme has been determined the application will load your views from the  path  property. This allows you to create a completely new front end while using the core of the application logic and module definitions.    The convention used to locate views is  theme path + module name + .html  which would cause our \"category\" example to be located here:  themes/lsvt/trainingcenter/category.html   Anatomy of a View  Views are simply HTML using Knockout's template syntax. They are bound to the viewmodel and have access to its methods and properties.   Running through  http://learn.knockoutjs.com  can help you learn the syntax and better understand templates.    Loading View-Specific Assets  Views also provide a special \"preload\" comment that allows you to preload files related to your view. These files can be anything YepNope supports, images, css, javascript etc. You'll need to place it on the first line of your template like so:  !-- preload: assets/category.js, assets/category.css --   Note that any images within the css files will be preloaded as well and your module will not be rendered until this process has been completed. Paths are relative to the current template's location.     Extending ViewModels  Views should load an additional .js file (via the preload comment) that will extend/decorate the viewmodel. The intention here is that views should be animated and will need to notify the application when they are complete.  (function(){\n    var app = lsvt.core.Application.getInstance(); // Get the app instance\n    var view = new lsvt.core.View( trainingcenter/category ); // Create a view instance\n    var model = app.getModel(  trainingcenter/topics  ); // Get the viewmodel instance\n\n    // Add methods, etc to the viewmodel\n    model.myViewSpecificFunctionality = function() {\n        $('.someViewElement').doSomethingSpecial();\n    };\n\n    view.rendered.add(function(){\n        // Do some transitioning in, or target specific elements\n    });\n\n    view.ended.add(function(){\n        // Do some transitioning out, or cleaning up then\n        view.complete();\n    });\n\n})();", 
            "title": "Modules"
        }, 
        {
            "location": "/blue-steel/resources/", 
            "text": "Resources\n\n\nOther than composing modules and rendering the ui, loading and sending data is one of the core functions of the application. It's pretty simple but has some important things to keep in mind when using external resources.\n\n\n\n\nExample Request\n\n\napp.loadResource( \ncourse\n, {\n    data: {id:id},\n    success: configLoaded,\n    abort: false,\n    showError: false,\n});\n\n\n\n\n\n\nAPI\n\n\nThe \nloadConfig\n method supports three arguments:  \n\n\n\n\n\n\nresourceName\n\nThe name of a resource from the JSON config\n\n\n\n\n\n\nconfigObject\n\nA config object that conforms to the \njQuery AJAX api\n and has a few extra properties (detailed below)\n\n\n\n\n\n\nnotifyApp\n\nBoolean - By default when a resource is loaded the ui will be covered and a loading animation shown. Passing \nfalse\n will prevent it from showing.\n\n\n\n\n\n\n\n\nConfig Properties\n\n\nThe config object has a few special properties that you can pass:\n\n\n\n\n\n\nabort\n\nBoolean - By default, loading a resource will \"abort\" any previous calls that are pending. Passing \nfalse\n will prevent that behavior.\n\n\n\n\n\n\nshowError\n\nBoolean - By default, server faults will be shown. Passing \nfalse\n will suppress them.\n\n\n\n\n\n\n\n\nErrors\n\n\nThe server can send back custom error messages that will be displayed in a modal dialog. This is achieved by setting an \nerror\n object in the JSON response. They look like this:\n\n\nerror\n : {\n    \ntype\n : \nNoAccess\n,\n    \nmessage\n : \nOops! You don't have access to this content...\n,\n    \ndetail\n : \nThis content is not currently available for your account. Sorry about that!\n,\n    \nshowReload\n : false\n}\n\n\n\n\n\n\nRedirects\n\n\nIn some cases you may want to redirect the user when they load a resource. To do so simply add a \nredirect\n property to the JSON response. This will change the url and proceed as expected.\n\n\nredirect\n : \ntrainingcenter/course/courseid", 
            "title": "Resources"
        }, 
        {
            "location": "/blue-steel/resources/#resources", 
            "text": "Other than composing modules and rendering the ui, loading and sending data is one of the core functions of the application. It's pretty simple but has some important things to keep in mind when using external resources.   Example Request  app.loadResource(  course , {\n    data: {id:id},\n    success: configLoaded,\n    abort: false,\n    showError: false,\n});   API  The  loadConfig  method supports three arguments:      resourceName \nThe name of a resource from the JSON config    configObject \nA config object that conforms to the  jQuery AJAX api  and has a few extra properties (detailed below)    notifyApp \nBoolean - By default when a resource is loaded the ui will be covered and a loading animation shown. Passing  false  will prevent it from showing.     Config Properties  The config object has a few special properties that you can pass:    abort \nBoolean - By default, loading a resource will \"abort\" any previous calls that are pending. Passing  false  will prevent that behavior.    showError \nBoolean - By default, server faults will be shown. Passing  false  will suppress them.     Errors  The server can send back custom error messages that will be displayed in a modal dialog. This is achieved by setting an  error  object in the JSON response. They look like this:  error  : {\n     type  :  NoAccess ,\n     message  :  Oops! You don't have access to this content... ,\n     detail  :  This content is not currently available for your account. Sorry about that! ,\n     showReload  : false\n}   Redirects  In some cases you may want to redirect the user when they load a resource. To do so simply add a  redirect  property to the JSON response. This will change the url and proceed as expected.  redirect  :  trainingcenter/course/courseid", 
            "title": "Resources"
        }, 
        {
            "location": "/video-player/overview/", 
            "text": "Video Player\n\n\nIn order to \"stay ahead of the game\" we've always developed custom playback solutions instead of using 3rd party players.  Our current solution is based in Flash with a trimmed-down mobile version, but due to browser advancements and ongoing politics (browsers shipping without Flash, etc) it's time to consider other options.\n\n\n\n\nLatest Advancements\n\n\nWe've recently created a new \nKnockout-Based Component\n that leverages \nMediaElementJS\n behind the scenes. This allows us to support things like HLS video on the desktop (via Flash) and also provides a single ui for both desktop and mobile. The component is currently being used for the course previews inside Blue-Steel.\n\n\nThis solution works fairly well for single (non-interactive) videos but has serious limitations moving forward, namely:\n\n\n\n\nUses Flash (on Desktop)\n\nBrowsers are quickly dumping Flash support or turning it off by default\n\n\nRelies on native HLS support on mobile\n\niOS has this pretty well handled but even the latest versions of Android still\nhave significant issues.\n\n\nNeed to implement custom ui features\n\nCaptions, bandwidth selection, etc are standard features in most 3rd party players but will require a bit of custom dev to get working in our player. It's not prohibitive, but will take some time.\n\n\n\n\n\n\nThe Path Forward\n\n\nWe've had a good run with in-house development, however the time is now to start thinking about 3rd party solutions.  \n\n\nThe technology that is the most promising seems to be \nTHEOplayer\n which uses a custom decoding solution in JavaScript. Due to the fact that their code has low-level access to playback mechansims we should be able to contract them to customize a solution for LightSpeed VT.\n\n\nWe've had some dialog with \nPieter-Jan Speelmans\n at OpenTelly who has been very helpful, interested and seems willing to accomodate our needs.  \n\n\nCheck out the \nNext Steps\n page for more information.\n\n\n\n\nVideo Player - Existing Features\n\n\nThere are a number of features from our current Flash player that would need to be replicated and supported in a new playback solution:\n\n\n\n\nCaptions\n\n\nWe currently have a large number of caption files in dfxp format, these files are hosted on Cloudfront along with the video files. Most have multiple languages, one file per language.  Any player we develop should be able to load these files and display captions accordingly.\n\n\nInteractivity\n\n\nOur current interactive solution relies on custom \"manifests\" that are written in JSON format and hosted on Cloudfront. The player loads these files and tailors the user's experience based on their interactions, while also providing basic reporting. For a detailed explanation, please \nsee the \"Interactivity\" page.\n\n\nSkip Prevention\n\n\nDepending on the user's access level within the system, the player will prevent forward seeking in order to force the user to wwtch the video for its complete duration.\n\n\n\n\nVideo Player - Desired Features\n\n\nBased on user feedback and desire to expand our product offering, there are a number of new developments we'd like to see with the video player.\n\n\n\n\nAdaptive Streaming\n\n\nWe currently serve most of our video content as progressive download. We would like to provide an adaptive streaming solution for users on varying bandwidth.\n\n\nResume or Seek To/From any Point\n\n\nIdeally the player could start from any time, it would be even nicer to support range requests to show clips as well as the full video.\n\n\nContent Protection\n\n\nWe've had a few occurances of video theft and customer inquisitions about protecting video content.\n\n\nEnhanced Interactivity / API\n\n\nAdd more capabilities to the interactive hotspots, add to cart, etc\n\n\nPortability\n\n\nIdeally the player would be embeddable either via an iframe or javascript solution so that it can be used outside of the Training Center.", 
            "title": "Overview"
        }, 
        {
            "location": "/video-player/overview/#video-player", 
            "text": "In order to \"stay ahead of the game\" we've always developed custom playback solutions instead of using 3rd party players.  Our current solution is based in Flash with a trimmed-down mobile version, but due to browser advancements and ongoing politics (browsers shipping without Flash, etc) it's time to consider other options.   Latest Advancements  We've recently created a new  Knockout-Based Component  that leverages  MediaElementJS  behind the scenes. This allows us to support things like HLS video on the desktop (via Flash) and also provides a single ui for both desktop and mobile. The component is currently being used for the course previews inside Blue-Steel.  This solution works fairly well for single (non-interactive) videos but has serious limitations moving forward, namely:   Uses Flash (on Desktop) \nBrowsers are quickly dumping Flash support or turning it off by default  Relies on native HLS support on mobile \niOS has this pretty well handled but even the latest versions of Android still have significant issues.  Need to implement custom ui features \nCaptions, bandwidth selection, etc are standard features in most 3rd party players but will require a bit of custom dev to get working in our player. It's not prohibitive, but will take some time.    The Path Forward  We've had a good run with in-house development, however the time is now to start thinking about 3rd party solutions.    The technology that is the most promising seems to be  THEOplayer  which uses a custom decoding solution in JavaScript. Due to the fact that their code has low-level access to playback mechansims we should be able to contract them to customize a solution for LightSpeed VT.  We've had some dialog with  Pieter-Jan Speelmans  at OpenTelly who has been very helpful, interested and seems willing to accomodate our needs.    Check out the  Next Steps  page for more information.   Video Player - Existing Features  There are a number of features from our current Flash player that would need to be replicated and supported in a new playback solution:   Captions  We currently have a large number of caption files in dfxp format, these files are hosted on Cloudfront along with the video files. Most have multiple languages, one file per language.  Any player we develop should be able to load these files and display captions accordingly.  Interactivity  Our current interactive solution relies on custom \"manifests\" that are written in JSON format and hosted on Cloudfront. The player loads these files and tailors the user's experience based on their interactions, while also providing basic reporting. For a detailed explanation, please  see the \"Interactivity\" page.  Skip Prevention  Depending on the user's access level within the system, the player will prevent forward seeking in order to force the user to wwtch the video for its complete duration.   Video Player - Desired Features  Based on user feedback and desire to expand our product offering, there are a number of new developments we'd like to see with the video player.   Adaptive Streaming  We currently serve most of our video content as progressive download. We would like to provide an adaptive streaming solution for users on varying bandwidth.  Resume or Seek To/From any Point  Ideally the player could start from any time, it would be even nicer to support range requests to show clips as well as the full video.  Content Protection  We've had a few occurances of video theft and customer inquisitions about protecting video content.  Enhanced Interactivity / API  Add more capabilities to the interactive hotspots, add to cart, etc  Portability  Ideally the player would be embeddable either via an iframe or javascript solution so that it can be used outside of the Training Center.", 
            "title": "Video Player"
        }, 
        {
            "location": "/video-player/interactivity/", 
            "text": "Interactive Playback\n\n\nInteractive video playback is a crucial part of what sets the LightSpeed VT platform apart from other training systems. This document will provide an overview on the concepts and details that go into our interactive playback.\n\n\n\n\nExample Sequence\n\n\nThe following diagram presents a typical interactive scenario. You'll notice a few things:\n\n\n\n\n\n\nVideos can have loop points/sections\n\nTypically when there is a prompt/interaction, the video will loop until the user makes a selection. There will be a defined loop time which the video will return upon completion. It will remain playing, indefinitely.\n\n\n\n\n\n\nUser-interactions can control the \"path\" of the playback\n\nIn the diagram below, once the user entered the loop portion of the \"Intro Video\", there would have been two options presented to the user. Each selection would continue playback but with a different video.\n\n\n\n\n\n\nVideos can link to another video upon ending\n\nVideo A doesn't have any options so it simply procedes to the End Video once it completes.\n\n\n\n\n\n\nVideos can link to themselves\n\nVideo B would have a selection that will cause the video to replay.\n\n\n\n\n\n\n\n\n                             +-----------+                  \n                             |           |                  \n                             |  Video A  |                   \n                             |           |                   \n+---------------+------+---\n +-----------+----------\n +-------------+\n|               |      |                              |             |\n|  Intro Video  | Loop |                              |  End Video  |\n|               |      |                              |             |\n+---------------+------+---\n +-----------+------+---\n +-------------+\n                             |           |      |                    \n                             |  Video B  | Loop |                    \n                             |           |      |                    \n                         +-\n +-----------+------+---+                \n                         |                          |                \n                         |                          |                \n                         +--------------------------+                \n\n\n\n\n\n\nJSON Manifest Examples\n\n\nThe JSON manifest format consists of a list of video objects, each with their own properties. In this section, we'll outline what the configuration options look like and document their functionality.\n\n\n\n\nVideo Object\n\n\nVideos are indexed by an id, in this case it's using \n\"intro\"\n which is special.\nThe player will always start with the \n\"intro\"\n video first.\n\n\n\n\n{\n    \nvideos\n: {\n        \nintro\n: {\n            \nquestion\n: \nWhen it comes to strategizing you should...\n,\n            \nbuttons\n: [],\n            \nloopStart\n: [0, 50],\n            \nsrc\n: \nvideo.mp4\n,\n            \ncaptions\n: {\n                \nSpanish\n: \nspanish.dfxp.xml\n,\n                \nEnglish\n: \nenglish.dfxp.xml\n\n            },\n            \nnext\n: \nintro\n,\n            \nending\n: {\n                \nvideo\n: \nintro\n,\n                \nurl\n: [\nhttp://www.google.com\n, \n_blank\n],\n                \ncomplete\n: false\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nquestion\n\n\nPlain text representation of the prompt/question used in the video\n\n\n\n\n\n\nbuttons\n\n\nArray of button objects\n\n\n\n\n\n\nloopStart\n\n\nArray of minutes, seconds values that tell the player where to loop to once the video ends\n\n\n\n\n\n\nsrc\n\n\nURL of the video resource\n\n\n\n\n\n\ncaptions\n\n\nURLs of caption files indexed by language\n\n\n\n\n\n\nnext\n\n\nPlay another video based on id specified, deprecated version of the \nending\n object\n\n\n\n\n\n\nending\n\n\nThis object instructs the player what to do upon completion. The available properties are:\nvideo\n - Play another video based on id specified\nurl\n - The player will open a link based on the \n[href, target]\n properties specified\ncomplete\n - Controls whether the video is completed via javascript. Useful for some instances where external resources need to be loaded before proceeding.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nButton Object\n\n\nThe following example shows a video with a single button\n\n\n\n\n{\n    \nvideos\n: {\n        \nintro\n: {\n            \nbuttons\n: [{\n                \nimg\n: \ntwitter-button.png\n,\n                \nwidth\n: 100,\n                \nheight\n: 50,\n                \nx\n: 100,\n                \ny\n: 300,\n                \nlabel\n: \nComplete w/ B\n,\n                \naction\n: \ncomplete\n,\n                \nvalue\n: \nB\n,\n                \ntime\n: [0, 18],\n                \nvideo\n: \nintro\n,\n                \nurl\n: {\n                    \nhref\n: \nhttp://videos.lightspeedvt.com/file.pdf\n,\n                    \ntarget\n: \n_blank\n,\n                    \nspecs\n: \nwidth=550,height=440\n\n                }\n            }]\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimg\n\n\nUrl for an image to load instead of a hotspot\n\n\n\n\n\n\nwidth\n\n\nPixel value for the button area's width\n\n\n\n\n\n\nheight\n\n\nPixel value for the button area's height\n\n\n\n\n\n\nx\n\n\nPixel value for the button area's left position\n\n\n\n\n\n\ny\n\n\nPixel value for the button area's top position\n\n\n\n\n\n\nlabel\n\n\nText to show when debug is set to true\n\n\n\n\n\n\naction\n\n\nA string value that is sent to any selection callbacks along with the value property\n\n\n\n\n\n\nvalue\n\n\nA string value that is sent to any selection callbacks along with the action property\n\n\n\n\n\n\ntime\n\n\nAn array in the format of \n[mins,secs]\n that tells the player when to activate the button area\n\n\n\n\n\n\nvideo\n\n\nThe id of a video to play once clicked\n\n\n\n\n\n\nurl\n\n\nAn object with the following properties:\nhref\n - the url to be opened\ntarget\n - the window in which to open the url\nspecs\n -properties for popup window", 
            "title": "Interactivity"
        }, 
        {
            "location": "/video-player/interactivity/#interactive-playback", 
            "text": "Interactive video playback is a crucial part of what sets the LightSpeed VT platform apart from other training systems. This document will provide an overview on the concepts and details that go into our interactive playback.   Example Sequence  The following diagram presents a typical interactive scenario. You'll notice a few things:    Videos can have loop points/sections \nTypically when there is a prompt/interaction, the video will loop until the user makes a selection. There will be a defined loop time which the video will return upon completion. It will remain playing, indefinitely.    User-interactions can control the \"path\" of the playback \nIn the diagram below, once the user entered the loop portion of the \"Intro Video\", there would have been two options presented to the user. Each selection would continue playback but with a different video.    Videos can link to another video upon ending \nVideo A doesn't have any options so it simply procedes to the End Video once it completes.    Videos can link to themselves \nVideo B would have a selection that will cause the video to replay.                                  +-----------+                  \n                             |           |                  \n                             |  Video A  |                   \n                             |           |                   \n+---------------+------+---  +-----------+----------  +-------------+\n|               |      |                              |             |\n|  Intro Video  | Loop |                              |  End Video  |\n|               |      |                              |             |\n+---------------+------+---  +-----------+------+---  +-------------+\n                             |           |      |                    \n                             |  Video B  | Loop |                    \n                             |           |      |                    \n                         +-  +-----------+------+---+                \n                         |                          |                \n                         |                          |                \n                         +--------------------------+                   JSON Manifest Examples  The JSON manifest format consists of a list of video objects, each with their own properties. In this section, we'll outline what the configuration options look like and document their functionality.   Video Object  Videos are indexed by an id, in this case it's using  \"intro\"  which is special. The player will always start with the  \"intro\"  video first.   {\n     videos : {\n         intro : {\n             question :  When it comes to strategizing you should... ,\n             buttons : [],\n             loopStart : [0, 50],\n             src :  video.mp4 ,\n             captions : {\n                 Spanish :  spanish.dfxp.xml ,\n                 English :  english.dfxp.xml \n            },\n             next :  intro ,\n             ending : {\n                 video :  intro ,\n                 url : [ http://www.google.com ,  _blank ],\n                 complete : false\n            }\n        }\n    }\n}     Property  Description      question  Plain text representation of the prompt/question used in the video    buttons  Array of button objects    loopStart  Array of minutes, seconds values that tell the player where to loop to once the video ends    src  URL of the video resource    captions  URLs of caption files indexed by language    next  Play another video based on id specified, deprecated version of the  ending  object    ending  This object instructs the player what to do upon completion. The available properties are: video  - Play another video based on id specified url  - The player will open a link based on the  [href, target]  properties specified complete  - Controls whether the video is completed via javascript. Useful for some instances where external resources need to be loaded before proceeding.          Button Object  The following example shows a video with a single button   {\n     videos : {\n         intro : {\n             buttons : [{\n                 img :  twitter-button.png ,\n                 width : 100,\n                 height : 50,\n                 x : 100,\n                 y : 300,\n                 label :  Complete w/ B ,\n                 action :  complete ,\n                 value :  B ,\n                 time : [0, 18],\n                 video :  intro ,\n                 url : {\n                     href :  http://videos.lightspeedvt.com/file.pdf ,\n                     target :  _blank ,\n                     specs :  width=550,height=440 \n                }\n            }]\n        }\n    }\n}     Property  Description      img  Url for an image to load instead of a hotspot    width  Pixel value for the button area's width    height  Pixel value for the button area's height    x  Pixel value for the button area's left position    y  Pixel value for the button area's top position    label  Text to show when debug is set to true    action  A string value that is sent to any selection callbacks along with the value property    value  A string value that is sent to any selection callbacks along with the action property    time  An array in the format of  [mins,secs]  that tells the player when to activate the button area    video  The id of a video to play once clicked    url  An object with the following properties: href  - the url to be opened target  - the window in which to open the url specs  -properties for popup window", 
            "title": "Interactive Playback"
        }, 
        {
            "location": "/video-player/next-steps/", 
            "text": "Next Steps\n\n\nThere are a few different ideas we have about where the video player needs to go, and how we'll best get it there. This page's purpose is to collect and document those ideas.\n\n\nHLS (Adaptive Streaming)\n\n\nAfter doing some extensive R\nD it's apparent that in its native form, HLS video will not be usable for interactive videos. This is due to varying levels of browser support, inconsistencies, etc. The main sticking points seem to be looping and seamlessly transitioning to new videos.  \n\n\nPossible Solutions:\n\n\n\n\nTHEOPlayer\n\n\nThe THEOPlayer team may be able to help solve the issues with HLS playback. If they are able to develop an HLS playback engine that can seamlessly loop, as well as seamlessly switch streams to another video (once a selection has been made), problem solved.\n\n\nHLS + Progressive (Hybrid)\n\n\nWe've had some discussions about whether we could use progressive videos just for looping and insert them at the end of HLS videos. This could work but might be problematic.", 
            "title": "Next Steps"
        }, 
        {
            "location": "/video-player/next-steps/#next-steps", 
            "text": "There are a few different ideas we have about where the video player needs to go, and how we'll best get it there. This page's purpose is to collect and document those ideas.  HLS (Adaptive Streaming)  After doing some extensive R D it's apparent that in its native form, HLS video will not be usable for interactive videos. This is due to varying levels of browser support, inconsistencies, etc. The main sticking points seem to be looping and seamlessly transitioning to new videos.    Possible Solutions:   THEOPlayer  The THEOPlayer team may be able to help solve the issues with HLS playback. If they are able to develop an HLS playback engine that can seamlessly loop, as well as seamlessly switch streams to another video (once a selection has been made), problem solved.  HLS + Progressive (Hybrid)  We've had some discussions about whether we could use progressive videos just for looping and insert them at the end of HLS videos. This could work but might be problematic.", 
            "title": "Next Steps"
        }
    ]
}